"use strict";(self.webpackChunkwiki_me=self.webpackChunkwiki_me||[]).push([[6268],{1951:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>a,toc:()=>d});var i=r(4848),n=r(8453);const o={title:"Git: Structured Bare Repository with Worktrees",sidebar_label:"Bare Repo with Worktrees",sidebar_position:2},s="Initializing a Bare Git Repository with Worktrees",a={id:"git/Cheatsheets/git-worktree-with-bare-repo",title:"Git: Structured Bare Repository with Worktrees",description:"When managing complex projects, it's often beneficial to maintain a clean separation between your Git technical directory (meaning the stuff under .git) and your working directories.",source:"@site/gists/git/Cheatsheets/git-worktree-with-bare-repo.md",sourceDirName:"git/Cheatsheets",slug:"/git/Cheatsheets/git-worktree-with-bare-repo",permalink:"/wiki.me/gists/git/Cheatsheets/git-worktree-with-bare-repo",draft:!1,unlisted:!1,editUrl:"https://github.com/xiaohai-huang/learning-notes/tree/master/gists/git/Cheatsheets/git-worktree-with-bare-repo.md",tags:[],version:"current",lastUpdatedBy:"Marcus Weber",lastUpdatedAt:1710706346,formattedLastUpdatedAt:"Mar 17, 2024",sidebarPosition:2,frontMatter:{title:"Git: Structured Bare Repository with Worktrees",sidebar_label:"Bare Repo with Worktrees",sidebar_position:2},sidebar:"defaultSidebar",previous:{title:"Ignore file contents without using .gitignore",permalink:"/wiki.me/gists/git/Cheatsheets/ignore-without-ignoring"}},c={},d=[{value:"Starting with a Bare Repository",id:"starting-with-a-bare-repository",level:2},{value:"Cloning Your Remote as Bare",id:"cloning-your-remote-as-bare",level:3},{value:"Adding Worktrees",id:"adding-worktrees",level:3},{value:"TL;DR",id:"tldr",level:2},{value:"Source",id:"source",level:2}];function l(e){const t={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,n.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"initializing-a-bare-git-repository-with-worktrees",children:"Initializing a Bare Git Repository with Worktrees"}),"\n",(0,i.jsxs)(t.p,{children:["When managing complex projects, it's often beneficial to maintain a clean separation between your ",(0,i.jsx)(t.code,{children:"Git technical directory"})," (meaning the stuff under ",(0,i.jsx)(t.code,{children:".git"}),") and your working directories.\nThis can be achieved by initializing a ",(0,i.jsx)(t.em,{children:"bare Git repository"})," and then adding ",(0,i.jsx)(t.code,{children:"worktrees"})," for different branches or features.\nThis setup allows for a more organized project structure, especially when working on multiple features or fixes simultaneously."]}),"\n",(0,i.jsx)(t.h2,{id:"starting-with-a-bare-repository",children:"Starting with a Bare Repository"}),"\n",(0,i.jsx)(t.h3,{id:"cloning-your-remote-as-bare",children:"Cloning Your Remote as Bare"}),"\n",(0,i.jsxs)(t.p,{children:["Begin by creating a directory for your project and clone the remote repository as a ",(0,i.jsx)(t.code,{children:"bare repository"})," within it.\nThis will contain all the Git technical files but none of the working directory files."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:'mkdir my-awesome-project\ncd my-awesome-project\ngit clone --bare git@github.com:myname/my-awesome-project.git .bare\necho "gitdir: ./.bare" > .git\n'})}),"\n",(0,i.jsxs)(t.p,{children:["This setup points your project's ",(0,i.jsx)(t.code,{children:".git"})," ",(0,i.jsx)(t.em,{children:"file"})," to the ",(0,i.jsx)(t.code,{children:".bare"})," ",(0,i.jsx)(t.em,{children:"directory"}),", effectively treating it as the Git technical directory."]}),"\n",(0,i.jsx)(t.h3,{id:"adding-worktrees",children:"Adding Worktrees"}),"\n",(0,i.jsxs)(t.p,{children:["With the ",(0,i.jsx)(t.code,{children:"bare repository"})," in place, you can now add ",(0,i.jsx)(t.code,{children:"worktrees"})," for different branches or features.\nEach ",(0,i.jsx)(t.code,{children:"worktree"})," acts as a linked working directory for a specific branch, allowing you to work on multiple branches without switching contexts in a single directory."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"git worktree add new-feature\ngit worktree add hotfix master\n"})}),"\n",(0,i.jsxs)(t.p,{children:["After adding the ",(0,i.jsx)(t.code,{children:"worktrees"}),", your project directory structure will look like this:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"- my-awesome-project\n  - .bare\n  - .git\n  - new-feature\n  - hotfix\n"})}),"\n",(0,i.jsxs)(t.p,{children:["This structure keeps your project organized, with the ",(0,i.jsx)(t.code,{children:".bare"})," directory holding the Git internals and separate directories for each ",(0,i.jsx)(t.code,{children:"worktree"}),"."]}),"\n",(0,i.jsx)(t.h2,{id:"tldr",children:"TL;DR"}),"\n",(0,i.jsxs)(t.p,{children:["By initializing a ",(0,i.jsx)(t.em,{children:"bare Git repository"})," and utilizing ",(0,i.jsx)(t.code,{children:"worktrees"}),", you can maintain a clean and structured project directory.\nThis approach is particularly useful for managing multiple features or fixes simultaneously, without the clutter of traditional branch switching."]}),"\n",(0,i.jsx)(t.h2,{id:"source",children:"Source"}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.a,{href:"https://compiledsuccessfully.dev/git-skip-worktree/",children:"https://compiledsuccessfully.dev/git-skip-worktree/"})})]})}function h(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8453:(e,t,r)=>{r.d(t,{R:()=>s,x:()=>a});var i=r(6540);const n={},o=i.createContext(n);function s(e){const t=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:s(e.components),i.createElement(o.Provider,{value:t},e.children)}}}]);